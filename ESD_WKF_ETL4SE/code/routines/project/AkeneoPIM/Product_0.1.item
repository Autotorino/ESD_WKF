package routines;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

import com.fasterxml.jackson.annotation.JsonIgnore;

import routines.JSONArray;
import routines.JSONObject;



public class Product {
	
	public static String family_auto = "veicoli_AUTO";
	public static String family_moto = "veicoli_MOTO";
	public static String family_lcv = "veicoli_COMMERCIALI";
	
	public static String category_auto = "auto";
	public static String category_moto = "moto";
	public static String category_lcv = "veicoli_commerciali";
	
	public Product() {
		Values values = new Values();
		setValues(values);
	}
	
	public Product(JSONObject jsonObjBody) {
		
		setIdentifier(jsonObjBody);
		setEnabled(jsonObjBody);
		setCategories(jsonObjBody);
		setFamily(jsonObjBody);
		
		
		//setCreated(jsonObjBody);
		//setUpdated(jsonObjBody);
		
		Values values = new Values(jsonObjBody);
		setValues(values);
		
		
	}	
	
	
	public Product(String jsonObject) {
		
		JSONObject jsonObjBody = new JSONObject(jsonObject);
		
		setIdentifier(jsonObjBody);
		setEnabled(jsonObjBody);
		setCategories(jsonObjBody);
		setFamily(jsonObjBody);
		
		
		//setCreated(jsonObjBody);
		//setUpdated(jsonObjBody);
		
		Values values = new Values(jsonObjBody);
		setValues(values);
		
		
	}

	
	private String identifier;

    private Boolean enabled;

    private String family;

    private List<String> categories;

    //private List<String> groups;

    private String parent;

    private Values values;

    //private String created;

    //private String updated;

    //private Associations associations;

    //private Quantified_associations quantified_associations;

    //private Metadata metadata;

    public void setIdentifier(String identifier){
        this.identifier = identifier;
    }
    
    public void setIdentifier(JSONObject jsonObjBody){
    	
    	if(jsonObjBody!=null){
    	  Object returnValue = jsonObjBody.get("identifier");
          this.identifier = (returnValue instanceof String) ? (String)returnValue : null;
    	}
    	else
    	  this.identifier = null;
    }
    
    public String getIdentifier(){
        return this.identifier;
    }
    
    public void setEnabled(Boolean enabled){
        this.enabled = enabled;
    }
    
    public void setEnabled(JSONObject jsonObjBody){
    	if(jsonObjBody!=null){
	    	Object returnValue = jsonObjBody.get("enabled");
	        this.enabled = (returnValue instanceof Boolean) ? (Boolean)returnValue : null;
    	}
    	else
    		this.enabled = null;
    }
    
    public Boolean getEnabled(){
        return this.enabled;
    }
    
    public void setFamily(String family){
        this.family = family;
    }
    
    public void setFamily(JSONObject jsonObjBody){
    	
    	if(jsonObjBody!=null){
    	  Object returnValue = jsonObjBody.get("family");
          this.family = (returnValue instanceof String) ? (String)returnValue : null;
    	}
    	else
    	  this.family = null;
    }
    
    public String getFamily(){
        return this.family;
    }
    
    public void setCategories(List<String> categories){
        this.categories = categories;
    }
    
    public void setCategories(String categories){
        this.categories = new ArrayList<String>(Arrays.asList(categories));
    }	

    public void setCategories(JSONObject jsonObjBody){
		this.categories = null;
		
		if(jsonObjBody!= null) {
	    	
			JSONArray jsonArray = (JSONArray)jsonObjBody.get("categories");
	    	
			if(jsonArray!= null && jsonArray.length()>0){
	    	
				ArrayList<String> arrayList = new ArrayList<String>();
				
				for (int i=0;i<jsonArray.length();i++)
					arrayList.add((String)jsonArray.get(i));
				
		        this.categories = arrayList;
			}
		}
    }
    
    public List<String> getCategories(){
        return this.categories;
    }
    /*
    public void setGroups(List<String> groups){
        this.groups = groups;
    }
    
    public void setGroups(String groups){
        this.groups = new ArrayList<String>(Arrays.asList(groups));
    }	
    
    public List<String> getGroups(){
        return this.groups;
    }
    */
    public void setParent(String parent){
        this.parent = parent;
    }
    public String getParent(){
        return this.parent;
    }
    
    public void setValues(Values values){
        this.values = values;
    }
    public Values getValues(){
        return this.values;
    }
    /*
    public void setCreated(String created){
        this.created = created;
    }
    
    public void setCreated(JSONObject jsonObjBody){
    	
    	if(jsonObjBody!=null){
    	  Object returnValue = jsonObjBody.get("created");
          this.created = (returnValue instanceof String) ? (String)returnValue : null;
    	}
    	else
    	  this.created = null;
    }
    
    public String getCreated(){
        return this.created;
    }
    
    public void setUpdated(String updated){
        this.updated = updated;
    }
    
    public void setUpdated(JSONObject jsonObjBody){
    	
    	if(jsonObjBody!=null){
    	  Object returnValue = jsonObjBody.get("updated");
          this.updated = (returnValue instanceof String) ? (String)returnValue : null;
    	}
    	else
    	  this.updated = null;
    }
    
    public String getUpdated(){
        return this.updated;
    }

    public void setAssociations(Associations associations){
        this.associations = associations;
    }
    
    public Associations getAssociations(){
        return this.associations;
    }
 
    public void setQuantified_associations(Quantified_associations quantified_associations){
        this.quantified_associations = quantified_associations;
    }
    public Quantified_associations getQuantified_associations(){
        return this.quantified_associations;
    }
    public void setMetadata(Metadata metadata){
        this.metadata = metadata;
    }
    public Metadata getMetadata(){
        return this.metadata;
    }
    */
    
    /*
     * CUSTOM GET
     */
    @JsonIgnore
    public String getCategoriesStringFromFamily(){
        
    	if(this.family!=null)
    	    if(family.equals(family_auto))
    		   return category_auto;
    	    else if(family.equals(family_moto))
			   return category_moto;
    	    else if(family.equals(family_lcv))
			   return category_lcv;
    	    else
    	       return null;
    	else
    	   return null;
    }
    
    @JsonIgnore
    public String getSede(){
    	
    	try {
    		return this.getValues().getSede().get(0).getData();
    	}
    	catch (Exception e){
	    	return null;
    	}
    }
    
    @JsonIgnore
    public String getCodiceEurotax(){
    	
    	try {
    		return this.getValues().getCodice_eurotax().get(0).getData();
    	}
    	catch (Exception e){
	    	return null;
    	}
    }
    
    @JsonIgnore
    public String getTelaio(){
    	
    	try {
    		return this.getValues().getTelaio().get(0).getData();
    	}
    	catch (Exception e){
	    	return null;
    	}
    }
    
    @JsonIgnore
    public String getDesMarca(){
    	
    	try {
    		return this.getValues().getDes_marca().get(0).getData();
    	}
    	catch (Exception e){
	    	return null;
    	}
    }
    
    @JsonIgnore
    public String getDesModello(){
    	
    	try {
    		return this.getValues().getDes_modello().get(0).getData();
    	}
    	catch (Exception e){
	    	return null;
    	}
    }    
    
    @JsonIgnore
    public String getDesVersione(){
    	
    	try {
    		return this.getValues().getDes_versione().get(0).getData();
    	}
    	catch (Exception e){
	    	return null;
    	}
    }   
    
    @JsonIgnore
    public String getTipo(){
    	
    	try {
    		return this.getValues().getTipo().get(0).getData();
    	}
    	catch (Exception e){
	    	return null;
    	}
    }   
    
    @JsonIgnore
    public String getCategoriaDealerK(){
    	
    	try {
    		return this.getValues().getCategoria_dealerK().get(0).getData();
    	}
    	catch (Exception e){
	    	return null;
    	}
    }   
    
    @JsonIgnore
    public String getColoreEsterno(){
    	
    	try {
    		return this.getValues().getColore_esterno().get(0).getData();
    	}
    	catch (Exception e){
	    	return null;
    	}
    }   
    
    @JsonIgnore
    public String getColoreInterno(){
    	
    	try {
    		return this.getValues().getColore_interni().get(0).getData();
    	}
    	catch (Exception e){
	    	return null;
    	}
    }   
    
    @JsonIgnore
    public String getRivestimento(){
    	
    	try {
    		return this.getValues().getRivestimento().get(0).getData();
    	}
    	catch (Exception e){
	    	return null;
    	}
    }   
    
    
    @JsonIgnore
    public String getPorte(){
    	
    	try {
    		return this.getValues().getPorte().get(0).getData();
    	}
    	catch (Exception e){
	    	return null;
    	}
    }   
    
    @JsonIgnore
    public String getVerniceEsterno(){
    	
    	try {
    		return this.getValues().getVernice_esterno().get(0).getData();
    	}
    	catch (Exception e){
	    	return null;
    	}
    }   
    
    @JsonIgnore
    public String getCambio(){
    	
    	try {
    		return this.getValues().getCambio().get(0).getData();
    	}
    	catch (Exception e){
	    	return null;
    	}
    }   

    @JsonIgnore
    public String getAlimentazione(){
    	
    	try {
    		return this.getValues().getAlimentazione().get(0).getData();
    	}
    	catch (Exception e){
	    	return null;
    	}
    }   
    
    @JsonIgnore
    public String getTrazione(){
    	
    	try {
    		return this.getValues().getTrazione().get(0).getData();
    	}
    	catch (Exception e){
	    	return null;
    	}
    }  
    
    @JsonIgnore
    public String getCilindrata(){
    	
    	try {
    		return this.getValues().getCilindrata().get(0).getData().getAmount();
    	}
    	catch (Exception e){
	    	return null;
    	}
    } 
    
    @JsonIgnore
    public String getKilowatt(){
    	
    	try {
    		return this.getValues().getKilowatt().get(0).getData();
    	}
    	catch (Exception e){
	    	return null;
    	}
    }  
    
    @JsonIgnore
    public String getKm(){
    	
    	try {
    		return this.getValues().getKm().get(0).getData();
    	}
    	catch (Exception e){
	    	return null;
    	}
    }  
    
    @JsonIgnore
    public String getTarga(){
    	
    	try {
    		return this.getValues().getTarga().get(0).getData();
    	}
    	catch (Exception e){
	    	return null;
    	}
    }  
    
    @JsonIgnore
    public String getClasseEmissioni(){
    	
    	try {
    		return this.getValues().getClasse_emissione().get(0).getData();
    	}
    	catch (Exception e){
	    	return null;
    	}
    }  
    
    @JsonIgnore
    public String getGaranzia(){
    	
    	try {
    		return this.getValues().getGaranzia().get(0).getData();
    	}
    	catch (Exception e){
	    	return null;
    	}
    }  
    
    @JsonIgnore
    public Boolean getIvaEsposta(){
    	
    	try {
    		return this.getValues().getIva_esposta().get(0).getData();
    	}
    	catch (Exception e){
	    	return null;
    	}
    }  
    
    @JsonIgnore
    public String getPrezzoVenditaManuale(){
    	
    	try {
    		return this.getValues().getPrezzo_vendita_manuale().get(0).getData().get(0).getAmount();
    	}
    	catch (Exception e){
	    	return null;
    	}
    }  
    
    @JsonIgnore
    public String getPrecedentiPropietari(){
    	
    	try {
    		return this.getValues().getPrecedenti_proprietari().get(0).getData();
    	}
    	catch (Exception e){
	    	return null;
    	}
    }  
    
    @JsonIgnore
    public String getPosti(){
    	
    	try {
    		return this.getValues().getPosti().get(0).getData();
    	}
    	catch (Exception e){
	    	return null;
    	}
    }  
    
    @JsonIgnore
    public String getDescrizioneEstesaDealerk(){
    	
    	try {
    		return this.getValues().getDescrizione_estesa_dealerk().get(0).getData();
    	}
    	catch (Exception e){
	    	return null;
    	}
    } 
    
    @JsonIgnore
    public String getPrefissoDescrizioneEstesaDealerk(){
    	
    	try {
    		return this.getValues().getPrefisso_descrizione_estesa_dealerk().get(0).getData();
    	}
    	catch (Exception e){
	    	return null;
    	}
    } 
    
    
    @JsonIgnore
    public String getCondizioniValiditaOfferta(){
    	
    	try {
    		return this.getValues().getCondizioni_validita_offerta().get(0).getData();
    	}
    	catch (Exception e){
	    	return null;
    	}
    } 
    
    @JsonIgnore
    public List<String> getCampagneMl(){
    	
    	try {
    		return this.getValues().getCampagne_ml().get(0).getData();
    	}
    	catch (Exception e){
	    	return null;
    	}
    }	
    
    @JsonIgnore
    public String getImmatricolazioneData(){
    	
    	try {
    		return this.getValues().getImmatricolazione_data().get(0).getData();
    	}
    	catch (Exception e){
	    	return null;
    	}
    }	
    
    @JsonIgnore
    public List<String> getCloudinaryImage(){
    	List<String> immaginiFiltered = new ArrayList<String>();
    		
    	boolean onlyNewFormatImage = true;
    	boolean onlyNewFormatImageCorrect = true;
    	
    	if (this.getValues().getCloudinary_image()!= null && this.getValues().getCloudinary_image().get(0)!= null 
    			 && this.getValues().getCloudinary_image().get(0).getData()!=null && this.getValues().getCloudinary_image().get(0).getData().size()>0)
    	{
    		for (String immagine:this.getValues().getCloudinary_image().get(0).getData()){
    			if (!UtilString.isEmptyTrim(immagine)) {
    			    
    				int indexSecond_ = immagine.indexOf("_", immagine.indexOf("_")+1);
    				
    			    if (indexSecond_ <1 || immagine.length() <= indexSecond_+1)
    			    	onlyNewFormatImage = false;
    			    else if (!UtilString.stringIsInteger(immagine.substring(immagine.lastIndexOf("_")+1)))
	    				onlyNewFormatImageCorrect = false;
	    			
	    			immaginiFiltered.add(immagine);
    			}
    		}
    		
    	}
    	
    	if (onlyNewFormatImage && onlyNewFormatImageCorrect && immaginiFiltered.size()>1) {
	       	Collections.sort(immaginiFiltered, new Comparator<String>() {
		        @Override
		        public int compare(String image1, String image2)
		        {
		        	Integer seqImmage1 = new Integer(image1.substring(image1.lastIndexOf("_")+1));
		        	Integer seqImmage2 = new Integer(image2.substring(image2.lastIndexOf("_")+1));
		        	return  seqImmage1.compareTo(seqImmage2);
		        }
		    });
    	}
    		
    	return immaginiFiltered;

    }	
    
    @JsonIgnore
    public List<String> getFiligraneDealerk(){
    	
    	try {
    		return this.getValues().getFiligrane_dealerk().get(0).getData();
    	}
    	catch (Exception e){
	    	return null;
    	}
    }	
    
    @JsonIgnore
    public List<String> getOptionalAutoSelect(){
    	
    	try {
    		return this.getValues().getOptional_auto_select().get(0).getData();
    	}
    	catch (Exception e){
	    	return null;
    	}
    }	
    
    @JsonIgnore
    public String getIdYoutube(){
    	
    	try {
    		return this.getValues().getId_youtube().get(0).getData();
    	}
    	catch (Exception e){
	    	return null;
    	}
    } 
    
    @JsonIgnore
    public List<String> getFiliale(){
    	
    	try {
    		return this.getValues().getFiliale().get(0).getData();
    	}
    	catch (Exception e){
	    	return null;
    	}
    }	   
    
    @JsonIgnore
    public List<String> getFilialeInfocar(){
    	
    	try {
    		return this.getValues().getFiliale_infocar().get(0).getData();
    	}
    	catch (Exception e){
	    	return null;
    	}
    }	
    
    @JsonIgnore
    public String getSecondaFoto(){
    	
    	try {
    		return this.getValues().getSeconda_foto().get(0).getData().toLowerCase();
    	}
    	catch (Exception e){
	    	return null;
    	}
    } 
    
    @JsonIgnore
    public String getUltimaFoto(){
    	
    	try {
    		return this.getValues().getUltima_foto().get(0).getData().toLowerCase();
    	}
    	catch (Exception e){
	    	return null;
    	}
    } 
   
}
