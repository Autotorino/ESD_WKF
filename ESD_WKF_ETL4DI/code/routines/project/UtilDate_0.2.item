package routines;

import java.text.Format;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.Period;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;

public class UtilDate {
	
	public static String getFormatDateStd(Date date){
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss"); 
	    String dataStr = sdf.format(date);
	    return dataStr;
	}
	
	public static String getFormatDate(Date date, String pattern){
		SimpleDateFormat sdf = new SimpleDateFormat(pattern); 
	    String dataStr = sdf.format(date);
	    return dataStr;
	}
	
	public static Date subtractsYearMonDays(Date date, int number, String format){
		Calendar cal = Calendar.getInstance();
		cal.setTime(date);
		if (format.equals("Y")) {
			cal.add(Calendar.YEAR, -number);
		} else if (format.equals("M")) {
			
			cal.add(Calendar.MONTH, -number);
		} else if (format.equals("D")) {
			cal.add(Calendar.DAY_OF_MONTH, -number);
		}
		
		return cal.getTime();
	}
	
	public static Date addYearMonDays(Date date, int number, String format){
		Calendar cal = Calendar.getInstance();
		cal.setTime(date);

		if (format.equals("YEAR")) {
			cal.add(Calendar.YEAR, number);
		} else if (format.equals("MONTH")) {
			cal.add(Calendar.MONTH, number);
		} else if (format.equals("DAYS")) {
			cal.add(Calendar.DAY_OF_MONTH, number);
		}
		
		return cal.getTime();
	}
	
	public static String convertTimeToDateStd(long time){
	    Date date = new Date(time);
	    Format format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	    return format.format(date);
	}
	
    public static Date parseDateWithMultiplePattern(String dateStr,String...patterns){
		
		Date returnDate = null;
		
		if(patterns!=null && patterns.length>0){
			for (String pattern :patterns)
			{
				SimpleDateFormat sdf = null;
	            if(pattern.equals("EEE MMM dd HH:mm:ss zzz yyyy")){
					sdf = new SimpleDateFormat(pattern,Locale.US);
	            }
	            else{
	            	sdf = new SimpleDateFormat(pattern);
	            }
					
				try{
				  returnDate = sdf.parse(dateStr);
				}
				catch(ParseException pe){/*ignore*/}
			}
		}
		else{
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
			    try{
				  returnDate = sdf.parse(dateStr);
				}
				catch(ParseException pe){/*ignore*/}

		}
		
		return returnDate;
	}
    
     public static Date getMostRecentDate(Date...dates){
		
		Date mostRecentDate = null;
		
		if(dates!=null && dates.length>0){
			for (Date dataCurr :dates)
			{
				if (dataCurr!=null){
					if (mostRecentDate==null){
						mostRecentDate = dataCurr;
					}
					else{
						if(dataCurr.compareTo(mostRecentDate)==1){
							mostRecentDate = dataCurr;
						}
					}
				}
			}
		}
		
		return mostRecentDate;
	}
     
    /*
     *@dateStart format "YYYY-MM-DD
     */
    public static Integer diffMonthFromNow(String dateStart){

    	if (dateStart==null||dateStart.trim().length()==0)
    		return null;
    	
    	try{
	    	Period diff = Period.between(LocalDate.parse(dateStart),LocalDate.now());
	    	int monthY = diff.getYears()*12;
	    	int monthM = diff.getMonths();
	    	int monthD = diff.getDays() > 0 ? 1:0;
	    	
	    	return new Integer(monthY+monthM+monthD);
    	}
    	catch(Exception e){
    		return null;
    	}
    }
    
    /*
     *@dateStart format "YYYY-MM-DD
     */
    public static Integer diffMonthFromNowMinus(String dateStart,long minusToNow){

    	if (dateStart==null||dateStart.trim().length()==0)
    		return null;
    	
    	try{
	    	Period diff = Period.between(LocalDate.parse(dateStart),LocalDate.now().minusDays(minusToNow));
	    	int monthY = diff.getYears()*12;
	    	int monthM = diff.getMonths();
	    	int monthD = diff.getDays() > 0 ? 1:0;
	    	
	    	return new Integer(monthY+monthM+monthD);
    	}
    	catch(Exception e){
    		return null;
    	}
    }
    
    public static String extractFromDate(String date,String format,int type){

    	try{
    		SimpleDateFormat sdf = new SimpleDateFormat(format);
	    	
    		Calendar cal = Calendar.getInstance();
    		cal.setTime(sdf.parse(date));
    		
    		int add1 = type == Calendar.MONTH ? 1 : 0;
    		
    		return new Integer(cal.get(type)+add1).toString();
    	}
    	catch(Exception e){
    		return null;
    	}
    }

}
